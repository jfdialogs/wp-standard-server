#!/usr/bin/env bash

function cwd {
  echo "$( cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
}

export -f cwd

function has_command {
  COMMAND=$1

  if [ -n "$(printf '%s\n' "${COMMANDS[@]}" | grep -e "^$COMMAND$")" ]; then
    echo true

    return
  fi

  echo false
}

function current_branch {
  echo $(git branch --show-current)
}

function is_master {
  if [ "master" == "$(current_branch)" ]; then
    echo true

    return
  fi

  echo false
}

function is_prod_ready {
  if [ -z "$(git ls-remote origin PROD)" ]; then
    echo false

    return
  fi

  echo true
}

function is_behind {
  HAS_PULL_CHANGES="$(git fetch && git pull --dry-run)"

  if [ -n "$HAS_PULL_CHANGES" ]; then
    echo true

    return
  fi

  echo false
}

function unstaged_changes {
  echo "$(git diff --cached --name-only && git ls-files --modified --deleted --others --exclude-standard)"
}

function show_unstaged {
  git add --dry-run .
}

function show_staged {
  git diff --name-status
}

function make_prod_branch {
  git branch PROD
}

function last_message {
  SHOW_BRANCH_NAME=$1

  if [ true == "$SHOW_BRANCH_NAME" ]; then
    git show-branch master
  else
    git show-branch --no-name master
  fi
}

function deploy_dev {
  echo "This command will commit changes to MASTER."
  echo ""

  CONTINUE=true

  if [ -n "$(unstaged_changes)" ]; then
    echo "Unstaged changes are listed below."
    echo ""

    unstaged_changes

    echo ""
    echo "There are changes detected. Add all unstaged changes with 'git add .' (y/n)?"

    read ANSWER

    echo ""

    if [[ "$ANSWER" =~ ^[Yy]$ ]]; then
      echo "git adding '.'..."
      echo ""

      git add .
    else
      CONTINUE=false

      echo "Continue without adding (y/n)?"

      read ANSWER

      echo ""

      if [[ "$ANSWER" =~ ^[Yy]$ ]]; then
        CONTINUE=true
      fi
    fi
  fi

  if [ "true" == "$CONTINUE" ]; then
    LAST_MESSAGE="$(last_message true)"

    echo "What is the commit message? An empty message will reuse last message."
    echo "Last message: $LAST_MESSAGE"
    echo ""

    UNSTAGED_COMMITS="$(show_staged)"

    if [ -s "$UNSTAGED_COMMITES" ]; then
      echo "$UNSTAGED_COMMITS"
      echo ""
    fi

    read MESSAGE

    echo ""

    if [ -z "$MESSAGE" ]; then
      echo "Re-using last commit message."
      echo ""

      MESSAGE="$(last_message)"
    fi

    git commit -m "$MESSAGE"

    echo ""

    git push origin master

    echo ""
  fi
}

function deploy_prod {
  echo "This command will promote master to PROD for deployment."
  echo ""

  CONITNUE=true

  if [ -n "$(unstaged_changes)" ]; then
    CONTINUE=false

    echo "There are unstaged changes detected. Continue without adding (y/n)?"
    echo ""

    show_unstaged

    echo ""

    read ANSWER

    echo ""

    if [[ "$ANSWER" =~ ^[Yy]$ ]]; then
      CONTINUE=true
    fi
  fi

  if [ "true" == "$CONTINUE" ]; then
    if [ "rue" != "$(is_master)" ]; then
      echo "Switching branch to MASTER..."
      echo ""

      git checkout master --quiet
    fi

    git push origin master:PROD

    echo ""
  fi
}

function initialize_repo {
  CONTINUE=true

  if [ true == "$(is_prod_ready)" ]; then
    echo "PROD branch already exists."
    echo ""

    CONTINUE=false
  elif [ true != "$(is_master)" ]; then
    echo "Switching branch to MASTER..."
    echo ""

    git checkout master --quiet
  fi

  if [ true == "$CONTINUE" ]; then
    echo "Creating branch PROD..."
    echo ""

    git checkout -b PROD --quiet
    git push -u origin PROD

    echo ""
    echo "Finished creating branch. Returning to master..."
    echo ""

    git checkout master --quiet

    echo "PROD branch created and pushed, master checked out."
    echo ""
  fi
}

function fetch_update {
  echo "Fetching remote update..."
  echo ""

  git fetch --quiet
}

SECTION="~~~~~~~~~~~~~~~~~~~~~~~~~~~"

echo ""
echo "Welcome to the Server Dock!"
echo $SECTION
echo ""

export CWD="$(cwd)"
export PROJECT_DIR="$CWD"
export DOCKER_DIR="$PROJECT_DIR/docker"
export COMMANDS=(help promote setup)

COMMAND=$1

if [ ! -n "$COMMAND" ]; then
  COMMAND=help
fi

if [ -f "$PROJECT_DIR/.env" ]; then
  source "$PROJECT_DIR/.env"
fi

if [ -f "$PROJECT_DIR/.env.local" ]; then
  source "$PROJECT_DIR/.env.local"
fi

if [ -n "$(has_command $COMMAND)" ] && [ "help" != "$COMMAND" ]; then
  echo "COMMAND: $COMMAND"
  echo ""

  STARTING_BRANCH="$(current_branch)"

  echo "Current branch: $STARTING_BRANCH"
  echo ""

  CONTINUE=true

  fetch_update

  if [ "commit" == "$COMMAND" ]; then
    deploy_dev
  fi

  if [ "promote" == "$COMMAND" ]; then
    deploy_prod
  fi

  if [ "setup" == "$COMMAND" ]; then
    initialize_repo
  fi

  if [ "$STARTING_BRANCH" != "$(current_branch)" ]; then
    echo "Switching back to starting branch $STARTING_BRANCH..."
    echo ""

    git checkout "$STARTING_BRANCH" --quiet
  fi

  echo "Done."
fi

if [ "help" == "$COMMAND" ] || [ -z "$COMMAND" ]; then
  echo "COMMANDS: ${COMMANDS[@]}"
fi

echo ""
echo $SECTION
echo ""
