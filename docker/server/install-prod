#!/usr/bin/env bash

if [ "root" != "$(whoami)" ]; then
  echo "Installation script must be run as root."
else
  HEADLESS=true
  PROJECT_DIR="/deploy-repo"
  RELAY_DIR="/deploy-relay"
  DOCKER_DIR="$PROJECT_DIR/docker"

  APP_ENV=prod

  echo ""
  echo "What is the remote deployment environment (dev or prod)?"

  read DEPLOY_ENV

  echo ""

  if [ -z "$DEPLOY_ENV" ]; then
    echo "DEPLOY_ENV is required."
    echo ""

    exit 1
  elif [ "$DEPLOY_ENV" != "prod" ] && [ "$DEPLOY_ENV" != "dev" ]; then
    echo "DEPLOY_ENV is required to be dev or prod for production installs."
    echo ""

    exit 1
  elif [ "$DEPLOY_ENV" == "dev" ]; then
    DEPLOY_BRANCH=master
  elif [ "$DEPLOY_ENV" == "prod" ]; then
    DEPLOY_BRANCH=PROD
  fi

  SITE_USER=dmag

  export HEADLESS
  export PROJECT_DIR
  export RELAY_DIR
  export DOCKER_DIR
  export DEPLOY_ENV
  export SITE_USER

  bash <(wget -qO - https://raw.githubusercontent.com/jfdialogs/wp-standard-server/master/docker/server/install-site-user)

  echo ""

  HAS_SITE_USER="$(getent passwd $SITE_USER)"

  if [ -z "$HAS_SITE_USER" ]; then
    echo "Installation failed on missing site user $SITE_USER."
  else
    echo "What is the git repo ssh address (format: git@github:[org]/[project-name].git)?"

    read GIT_REPO

    echo ""

    if [ -z "$GIT_REPO" ]; then
      echo "Install canceled."
    else
      if [ -d "$PROJECT_DIR" ]; then
        rm -d "$PROJECT_DIR"
      fi

      if [ -d "$RELAY_DIR" ]; then
        rm -d "$RELAY_DIR"
      fi

      mkdir "$PROJECT_DIR"
      mkdir "$RELAY_DIR"

      chown -R "$SITE_USER" "$PROJECT_DIR"
      chown -R "$SITE_USER" "$RELAY_DIR"
      chgrp -R "$SITE_USER" "$PROJECT_DIR"
      chgrp -R "$SITE_USER" "$RELAY_DIR"

      echo "Git cloning $GIT_REPO  branch $DEPLOY_BRANCH into $PROJECT_DIR as $SITE_USER"
      echo ""

      git config --global http.postBuffer 524288000

      su -c "git clone -b $DEPLOY_BRANCH $GIT_REPO $PROJECT_DIR" - "$SITE_USER"

      echo ""

      if [ ! -s "$PROJECT_DIR/server" ]; then
        echo "Git repo $GIT_REPO not found or install error."
        echo ""
      else
        "$PROJECT_DIR/server" init-prod && echo ""
        "$PROJECT_DIR/server" install-hooks && echo ""
        "$PROJECT_DIR/server" own-project && echo ""
        "$PROJECT_DIR/server" setup-volume && echo ""

        cd "$PROJECT_DIR"

        source "$PROJECT_DIR/.env"
        source "$PROJECT_DIR/.env.prod"

        export PROD_DB_HOST
        export PROD_DB_PORT
        export PROD_DB_NAME
        export PROD_DB_USER
        export PROD_DB_PASSWORD

        CACHE_DIR="/mnt/$PROJECT_VOLUME/conf/varnish"

        cp "$PROJECT_DIR/compose-prod.yaml" "$PROJECT_DIR/compose-install.yaml"

        sed -i -e 's/\/etc\/apache2/\/etc\/apache-temp/g' "$PROJECT_DIR/compose-install.yaml"
        sed -i -e 's/\/etc\/letsencrypt/\/etc\/letsencrypt-temp/g' "$PROJECT_DIR/compose-install.yaml"

        docker-compose -f "$PROJECT_DIR/compose-install.yaml" up -d --remove-orphans

        docker-compose -f "$PROJECT_DIR/compose-install.yaml" exec app cp -r /etc/apache2/. /etc/apache-temp/
        docker-compose -f "$PROJECT_DIR/compose-install.yaml" exec app cp -r /etc/letsencrypt/. /etc/letsencrypt-temp/

        sed -i -e 's/<VirtualHost \*:80>/<VirtualHost \*:8080>/' "/mnt/$PROJECT_VOLUME/conf/apache/sites-enabled/000-default.conf"

        docker-compose -f "$PROJECT_DIR/compose-install.yaml" stop
        docker-compose -f "$PROJECT_DIR/compose-install.yaml" down

        ls -lah "/mnt/$PROJECT_VOLUME/conf/apache"
        ls -lah "/mnt/$PROJECT_VOLUME/conf/letsencrypt"

        rm "$PROJECT_DIR/compose-install.yaml"

        echo "Copying $CACHE_DIR/default.vcl..."
        echo ""

        cp "$DOCKER_DIR/etc/varnish/default.vcl" "$CACHE_DIR/default.vcl"
        chgrp www-data  "$CACHE_DIR/default.vcl"

        if [ ! -s "$DOCKER_DIR/etc/varnish/secret" ]; then
          uuidgen > "$DOCKER_DIR/etc/varnish/secret"
        fi

        echo "Symlinking $PROJECT_DIR to /app..."
        echo ""

        ln -s "$PROJECT_DIR" /app
        chown www-data /app
        chgrp www-data /app

        echo "Start prod server with '/app/server start-prod'."
        echo ""
      fi

      echo "Production server installed."
      echo ""
    fi
  fi
fi
