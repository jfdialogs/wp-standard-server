#!/usr/bin/env bash

function export_groups {
  if [ -d "$EXPORTS_DIR" ]; then
    echo "$(ls "$EXPORTS_DIR")"
  fi
}

function imports {
  SELECTED_GROUP=$1

  SCRIPT_DIR="$EXPORTS_DIR/$SELECTED_GROUP"

  if [ -d "$SCRIPT_DIR" ]; then
    IMPORT_PATHS=$(ls "$SCRIPT_DIR")

    echo "${IMPORT_PATHS[*]}"
  fi
}

function run_import_jobs {
  FILENAMES=("$1")

  DEV_DB_NAME="${PROD_DB_NAME}_dev"

  if [[ "$DEV_DB_NAME" != *_dev ]]; then
    echo "DEV_DB_NAME '$DEV_DB_NAME' does not end with _dev, quitting to be safe."
    echo ""

    exit
  else
    # The PROD dev database is in the PROD db cluster, appended with _dev
    # We''l reuse prod connection info, though.
    PROD_CNF="$(cnf_file prod $PROD_DB_USER $PROD_DB_PASSWORD)"

    COUNTER=1

    "$MYSQL_EXE" --defaults-extra-file="$PROD_CNF" -h "$PROD_DB_HOST" -P "$PROD_DB_PORT" -e "DROP DATABASE IF EXISTS \`$DEV_DB_NAME\`"
    "$MYSQL_EXE" --defaults-extra-file="$PROD_CNF" -h "$PROD_DB_HOST" -P "$PROD_DB_PORT" -e "CREATE DATABASE IF NOT EXISTS \`$DEV_DB_NAME\`"

    for SCRIPT in ${FILENAMES[*]};
    do
      LOCAL_PATH="$EXPORTS_DIR/$SCRIPT"
      PROD_SCRIPT="$EXPORTS_DIR/$SCRIPT"

      echo "$COUNTER. Importing file://$LOCAL_PATH ..."

      if [ ! -s "$LOCAL_PATH" ]; then
        echo "$LOCAL_PATH import script not found."
        echo ""
      else
        "$MYSQL_EXE" --defaults-extra-file="$PROD_CNF" -h "$PROD_DB_HOST" -P "$PROD_DB_PORT" -e "USE \`$DEV_DB_NAME\`; source $PROD_SCRIPT;"
      fi

      COUNTER=$[COUNTER +1]
    done

    "$MYSQL_EXE" --defaults-extra-file="$PROD_CNF" -h "$PROD_DB_HOST" -P "$PROD_DB_PORT" -e "USE \`$DEV_DB_NAME\`; UPDATE wp_options SET option_value = '${DEV_BASE_URL}' WHERE option_name = 'siteurl';"
    "$MYSQL_EXE" --defaults-extra-file="$PROD_CNF" -h "$PROD_DB_HOST" -P "$PROD_DB_PORT" -e "USE \`$DEV_DB_NAME\`; UPDATE wp_options SET option_value = '${DEV_BASE_URL}' WHERE option_name = 'home';"

    rm "$PROD_CNF"
  fi
}

function cnf_file {
  ENV=$1
  FILENAME="$DOCKER_DIR/data/mysql/$ENV-credentials.cnf"
  DB_USER=$2
  DB_PASSWORD=$3

  echo "[client]" > $FILENAME
  echo "user=$DB_USER" >> $FILENAME
  echo "password=$DB_PASSWORD" >> $FILENAME

  echo $FILENAME
}

if [ -z "$PROJECT_DIR" ] || [ -z "$DOCKER_DIR" ]; then
  echo "PROJECT_DIR and DOCKER_DIR are required."
elif [ -z "$DEPLOY_ENV" ] || [ "$DEPLOY_ENV" != local ]; then
  echo "Copying remote PROD server data to remote DEV database only allowed in local env."
else
  echo "This command will load an exported database from www-prod in the remote www-dev database."
  echo ""

  EXPORTS_DIR="$DOCKER_DIR/data/export"

  source "$PROJECT_DIR/.env"
  source "$PROJECT_DIR/.env.local"
  source "$PROJECT_DIR/.env.prod"

  EXPORT_DIRS=($(export_groups))

  if [ -z "${EXPORT_DIRS[*]}" ]; then
    echo "No export groups found. Dump WWW prod now?"

    read ANSWER

    if [ "$ANSWER" != "${ANSWER#[Yy]}" ]; then
      echo "Running dump on www-prod..."
      echo ""

      "$DOCKER_DIR/scripts/dump-prod"
    fi

    EXPORT_DIRS=($(export_groups))
  fi

  if [ -n "${EXPORT_DIRS[*]}" ]; then
    COUNTER=1

    for EXPORTED in ${EXPORT_DIRS[*]};
    do
      echo "$COUNTER. $EXPORTED"

      COUNTER=$[COUNTER +1]
    done

    echo ""
    echo "Enter number for export group to run now."

    read ANSWER

    echo ""

    ENTRY=$[ANSWER -1]

    if [ -z "$ANSWER" ] || [ -z "${EXPORT_DIRS[$ENTRY]}" ]; then
      echo "Entry not found."
      echo ""
    else
      SELECTED_GROUP="${EXPORT_DIRS[$ENTRY]}"

      echo "You picked import group: $SELECTED_GROUP. Continue (y/n)?"

      read ANSWER

      echo ""

      if [ "$ANSWER" != "${ANSWER#[Yy]}" ]; then
        IMPORT_SCRIPTS=($(imports "$SELECTED_GROUP"))
        JOBS="$(printf "$SELECTED_GROUP/%s " ${IMPORT_SCRIPTS[*]})"

        run_import_jobs "$JOBS"

        echo ""
        echo "Export import done."
        echo ""
      fi
    fi
  fi
fi
