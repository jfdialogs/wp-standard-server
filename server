#!/usr/bin/env bash

function cwd {
  echo "$( cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
}

export -f cwd

function has_command {
  COMMAND=$1

  if [ -n "$(printf '%s\n' "${COMMANDS[@]}" | grep -e "^$COMMAND$")" ]; then
    echo true
  fi

  if [ "local" == "$DEPLOY_ENV" ] && [ -n "$(printf '%s\n' "${LOCAL_COMMANDS[@]}" | grep -e "^$COMMAND$")" ]; then
    echo true
  fi

  if [ "dev" == "$DEPLOY_ENV" ] && [ -n "$(printf '%s\n' "${DEV_COMMANDS[@]}" | grep -e "^$COMMAND$")" ]; then
    echo true
  fi

  if [ "prod" == "$DEPLOY_ENV" ] && [ -n "$(printf '%s\n' "${PROD_COMMANDS[@]}" | grep -e "^$COMMAND$")" ]; then
    echo true
  fi
}

if [[ "$HEADLESS" == true ]]; then
  HEADLESS=true
else
  HEADLESS=false
fi

export HEADLESS

if [[ "$HEADLESS" == false ]]; then
  SECTION="~~~~~~~~~~~~~~~~~~~~~~~~~~~"

  echo ""
  echo "Welcome to the Server Dock!"
  echo $SECTION
  echo ""
fi

export CWD="$(cwd)"
export PROJECT_DIR="$CWD"
export DOCKER_DIR="$PROJECT_DIR/docker"

# Basic server commands. Custom scripts may be added to $DOCKER_DIR/scripts,
# see the README in that directory.
export COMMANDS=(
  help
  build
  install
  open-admin
  open-site
  restart
  show-logs
  start
  status
  stop
  tail-logs
  use-app
  use-client
  use-object-cache
)
export LOCAL_COMMANDS=(
  config-repo
  import-prod-to-dev
  import-prod-to-local
  init-local
  install-local
  setup
  setup-database
  start-local
  stop-local
  uninstall
  uninstall-local
  use-data
)
export DEV_COMMANDS=(
  deploy
  dump-prod
  init-prod
  install-certificate
  install-hooks
  install-prod
  install-site-user
  own-project
  own-volume
  setup-volume
  start-prod
  stop-prod
  su-prod
  unlink
)
export PROD_COMMANDS=(
  deploy
  init-prod
  install-certificate
  install-hooks
  install-prod
  install-site-user
  own-project
  own-volume
  setup-volume
  start-prod
  stop-prod
  su-prod
  unlink
)

COMMAND=$1

if [ ! -n "$COMMAND" ]; then
  COMMAND=help
fi

if [ -f "$PROJECT_DIR/.env" ]; then
  source "$PROJECT_DIR/.env"
fi

if [ -n "$(has_command $COMMAND)" ]; then
  if [ "help" != "$COMMAND" ]; then
    echo "COMMAND: $COMMAND"
    echo ""

    COMMAND_SCRIPT="$DOCKER_DIR/server/$COMMAND"

    if [ -s "$DOCKER_DIR/scripts/$COMMAND" ]; then
      COMMAND_SCRIPT="$DOCKER_DIR/scripts/$COMMAND"
    fi

    if [ -f "$COMMAND_SCRIPT" ]; then
      HEADLESS_TEMP="$HEADLESS"
      HEADLESS=true

      source "$COMMAND_SCRIPT"

      HEADLESS="$HEADLESS_TEMP"
    else
      echo "Command not found!"
    fi
  else
    echo "APP MODE"
    echo "======="
    echo "ALL    { ${COMMANDS[@]}"
    echo "LOCAL  { ${LOCAL_COMMANDS[@]}"
    echo "DEV    { ${DEV_COMMANDS[@]}"
    echo "PROD   { ${PROD_COMMANDS[@]}"
    echo "======="
  fi
else
  echo "Command $COMMAND not found for $APP_ENV."
fi

if [[ "$HEADLESS" == false ]]; then
  echo ""
  echo $SECTION
  echo ""
fi
